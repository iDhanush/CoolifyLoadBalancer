version: "3.8"

services:
  fastapi_app1:
    container_name: fastapi_app1
    build: .
    ports:
      - "9000:9000"
    command: [ "python", "main.py", "9000" ]
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  fastapi_app2:
    container_name: fastapi_app2
    build: .
    ports:
      - "9001:9001"
    command: [ "python", "main.py", "9001" ]
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  fastapi_app3:
    container_name: fastapi_app3
    build: .
    ports:
      - "9002:9002"
    command: [ "python", "main.py", "9002" ]
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  fastapi_app4:
    container_name: fastapi_app4
    build: .
    ports:
      - "9003:9003"
    command: [ "python", "main.py", "9003" ]
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9003"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_net

  load_balancer:
    container_name: nginx_load_balancer
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "8999:8999"
    depends_on:
      fastapi_app1:
        condition: service_healthy
      fastapi_app2:
        condition: service_healthy
      fastapi_app3:
        condition: service_healthy
      fastapi_app4:
        condition: service_healthy
    restart: on-failure
    networks:
      - app_net

networks:
  app_net:
    driver: bridge
